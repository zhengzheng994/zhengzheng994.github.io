<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>smile</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>要做做的巨人</description>
    <pubDate>Mon, 12 Apr 2021 10:43:30 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2021/04/10/hello-world/</link>
      <guid>http://example.com/2021/04/10/hello-world/</guid>
      <pubDate>Sat, 10 Apr 2021 06:28:08 GMT</pubDate>
      
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2021/04/10/hello-world/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MySql</title>
      <link>http://example.com/2020/02/10/MySql/</link>
      <guid>http://example.com/2020/02/10/MySql/</guid>
      <pubDate>Mon, 10 Feb 2020 14:07:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;MySql数据库（完善中…）&quot;&gt;&lt;a href=&quot;#MySql数据库（完善中…）&quot; class=&quot;headerlink&quot; title=&quot;MySql数据库（完善中…）&quot;&gt;&lt;/a&gt;MySql数据库（完善中…）&lt;/h1&gt;&lt;h2 id=&quot;1-1数据库概述&quot;&gt;&lt;a href=&quot;#1-1数据库概述&quot; class=&quot;headerlink&quot; title=&quot;1.1数据库概述&quot;&gt;&lt;/a&gt;1.1数据库概述&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;数据库就是存储数据的仓库，其本质是一个文件系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据库管理系统：指一种操作和管理数据库的大型软件，用于建立和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库表中的内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;D:/Blog/source/images/aHR0cHM6Ly91cGxvYWRmaWxlcy5ub3djb2Rlci5jb20vaW1hZ2VzLzIwMjAwMTAxLzQ5NDIzMjVfMTU3Nzg3MjYyOTQzMF9FNzQ5NkZEQzc0ODcxMjQyM0M1NEQ3RjI1NkUyREQyNQ-1621743810073&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过dos窗口打开MySql服务或者关闭&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;net start mysql&lt;/li&gt;
&lt;li&gt;net stop mysql&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;D:/Blog/source/images/20201202102052259-1621743829423.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建数据库：creat database 数据库名 character set 字符集&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询某个数据库定义的信息： show create database 数据库名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看正在使用的数据库 select database();&lt;/p&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; 创建表 create table表名(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;字段名 类型(长度) 约束,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;字段名 类型(长度) 约束&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/&lt;em&gt;添加多个列方法一&lt;/em&gt;/&lt;/p&gt;
 &lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; student&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ADD&lt;/span&gt; address &lt;span class=&quot;type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ADD&lt;/span&gt; home_tel &lt;span class=&quot;type&quot;&gt;CHAR&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt; /&lt;em&gt;add语句之间用逗号分隔，最后用分号结束&lt;/em&gt;/&lt;/p&gt;
&lt;p&gt; /&lt;em&gt;add语句之间用逗号分隔，最后用分号结束&lt;/em&gt;/&lt;/p&gt;
&lt;p&gt; /&lt;em&gt;添加多个列方法二&lt;/em&gt;/&lt;/p&gt;
 &lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; student&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ADD&lt;/span&gt; (address &lt;span class=&quot;type&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;,home_tel &lt;span class=&quot;type&quot;&gt;CHAR&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ALTER TABLE sort MODIFY sname VARCHAR(50) NOT NULL;&lt;/code&gt; /* 添加约束NOT NULL */&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为分类表的分类名称字段进行更换 更换为 snamesname varchar(30)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rename 表名 to 新表名&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-2-编码设置&quot;&gt;&lt;a href=&quot;#2-2-编码设置&quot; class=&quot;headerlink&quot; title=&quot;2.2 编码设置&quot;&gt;&lt;/a&gt;2.2 编码设置&lt;/h2&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="MySql数据库（完善中…）"><a href="#MySql数据库（完善中…）" class="headerlink" title="MySql数据库（完善中…）"></a>MySql数据库（完善中…）</h1><h2 id="1-1数据库概述"><a href="#1-1数据库概述" class="headerlink" title="1.1数据库概述"></a>1.1数据库概述</h2><p>[TOC]</p><ol><li><p>数据库就是存储数据的仓库，其本质是一个文件系统</p></li><li><p>数据库管理系统：指一种操作和管理数据库的大型软件，用于建立和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库表中的内容</p></li><li><p><img src="D:/Blog/source/images/aHR0cHM6Ly91cGxvYWRmaWxlcy5ub3djb2Rlci5jb20vaW1hZ2VzLzIwMjAwMTAxLzQ5NDIzMjVfMTU3Nzg3MjYyOTQzMF9FNzQ5NkZEQzc0ODcxMjQyM0M1NEQ3RjI1NkUyREQyNQ-1621743810073" alt="img"></p></li><li><p>通过dos窗口打开MySql服务或者关闭</p><ol><li>net start mysql</li><li>net stop mysql</li></ol></li><li><p><img src="D:/Blog/source/images/20201202102052259-1621743829423.png" alt="img"></p></li><li><p>创建数据库：creat database 数据库名 character set 字符集</p></li><li><p>查询某个数据库定义的信息： show create database 数据库名</p></li><li><p>查看正在使用的数据库 select database();</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 创建表 create table表名(</span><br><span class="line">字段名 类型(长度) 约束,</span><br><span class="line">字段名 类型(长度) 约束</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr></li><li><p>/<em>添加多个列方法一</em>/</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student</span><br><span class="line"><span class="keyword">ADD</span> address <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">ADD</span> home_tel <span class="type">CHAR</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p> /<em>add语句之间用逗号分隔，最后用分号结束</em>/</p><p> /<em>add语句之间用逗号分隔，最后用分号结束</em>/</p><p> /<em>添加多个列方法二</em>/</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student</span><br><span class="line"><span class="keyword">ADD</span> (address <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,home_tel <span class="type">CHAR</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>ALTER TABLE sort MODIFY sname VARCHAR(50) NOT NULL;</code> /* 添加约束NOT NULL */</p></li><li><p>为分类表的分类名称字段进行更换 更换为 snamesname varchar(30)</p></li><li><p>rename 表名 to 新表名</p></li></ol><h2 id="2-2-编码设置"><a href="#2-2-编码设置" class="headerlink" title="2.2 编码设置"></a>2.2 编码设置</h2><ol><li><p>alter table 表名 character 字符集;</p></li><li><p><code>ALTER TABLE sort CHANGE sname snamename VARCHAR(30);</code></p></li><li><p>show variables like ‘charater%’;查看所有mysql的编码</p></li><li><p>set character_set_results=gbk:</p></li><li><p>在mysql安装目录下有my.ini文件</p><ol><li>default-character-set=gbk客户端编码的设置</li><li>character-set-sever=utf8 服务器编码设置</li><li>完成配置文件，需要重启服务</li></ol></li><li><p>Alter table 表名 add primary key(字段列表);</p></li></ol><h2 id="2-3-自增长变量"><a href="#2-3-自增长变量" class="headerlink" title="2.3 自增长变量"></a>2.3 自增长变量</h2><ol><li><p>修改自增长：Alter table 表名 auto_increment=值；</p></li><li><p>查看自增长对应的变量 show variables like ‘auto_increment%’</p></li><li><p>修改自增长变量：Set quto_increment_increment=5;</p></li><li><p>删除自增长：Alter table 表名 modify 字段 类型；</p></li><li><p>在新增表之后增加外键: 修改表结构</p><p>  Alter table 表名 add [constraint 外键名字] foreign key(外键字段) references 父表(主键字段);</p></li></ol><h2 id="2-4-索引"><a href="#2-4-索引" class="headerlink" title="2.4 索引"></a>2.4 索引</h2><ol><li><p>```sql</p><p>CREATE TABLE 表名称(</p><pre><code>  ......,  INDEX [索引名称] (字段),  ......</code></pre><p>  );</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 向已存在的表中添加索引的方式如下</span><br><span class="line"></span><br><span class="line">     CREATE INDEX 索引名称 ON 表名(字段); &#x2F;*添加索引方式1*&#x2F;</span><br><span class="line"></span><br><span class="line">     ALTER TABLE 表名 ADD INDEX 索引名称(字段); &#x2F;*添加索引方式2*&#x2F;</span><br><span class="line"></span><br><span class="line">3. show index from 表名；</span><br><span class="line"></span><br><span class="line">4. DROP INDEX 索引名称 ON 表名</span><br><span class="line"></span><br><span class="line">5. 索引的使用原则：\1. 数据量很大，且经常被查询的数据表可以设置索引 (即读多写少的表可以设置索引)</span><br><span class="line"></span><br><span class="line">     \2. 索引只添加在经常被用作检索条件的字段上 (比如电子商城需要在物品名称关键字加索引)</span><br><span class="line"></span><br><span class="line">     3.不要在大字段上创建索引 (比如长度很长的字符串不适合做索引，因为查找排序时间变的很长)</span><br><span class="line"></span><br><span class="line">   ---</span><br><span class="line"></span><br><span class="line">## 2.5 范式</span><br><span class="line"></span><br><span class="line">1. 范式：Normal Format,是一种离散数学中的知识，是为了解决一种数据存储和优化的问题：保存数据的存储之后，凡是能通过关系寻找出来的数据，坚决不再重复存储：终极目标是为了减少数据的冗余；六范式</span><br><span class="line"></span><br><span class="line">2. 第一范式：再设计表存储数据的时候，如果表中设计的字段存储的数据，在取出来使用之前还需要额外的处理，那么这个表设计不满足第一范式（原子性）；第二范式：在数据表设计的过程中，如果有复合主键，且表中有字段并不是由整个主键来确定，而是依赖主键的某个字段：存在字段依赖主键部分的问题，称之为部分依赖；第二范式就是要解决表设计中不允许出现部分依赖。第三范式：应该一张表中所有字段都应该直接依赖主键，而不是依赖非主键字段而间接依赖。（解决传递依赖）</span><br><span class="line"></span><br><span class="line">   ---</span><br><span class="line"></span><br><span class="line">## 3.1 主键冲突</span><br><span class="line"></span><br><span class="line">  1. insert into 表名 [字段1，字段2，字段3] values （值1，值2，值3），（值1，值2，值3）;&#x2F;&#x2F;插入多条记录</span><br><span class="line"></span><br><span class="line">  2. IGNORE:IGNORE关键字只会插入数据库不存在的记录。比如主键冲突、唯一性冲突，数据库会报错，加上IGNORE之后数据库会忽略这条数据不会报错。</span><br><span class="line"></span><br><span class="line">     INSERT [IGNORE] INTO 表名 ......;</span><br><span class="line"></span><br><span class="line">  3. INSERT INGORE INTO t_dept(deptno,dname,loc) values (70,&quot;A&quot;,&quot;北京&quot;);</span><br><span class="line"></span><br><span class="line">  4. Insert into 表名[(字段列表:包含主键)] values(值列表) **on duplicate key update 字段 &#x3D; 新值**;(主键冲突，更新操作)</span><br><span class="line"></span><br><span class="line">  5. 在mabits中**应该改为...on duplicate key update room &#x3D; values(room)，**</span><br><span class="line"></span><br><span class="line">  6. 主键冲突: **替换**</span><br><span class="line"></span><br><span class="line">     **Replace** into 表名 [(字段列表:包含主键)] values(值列表);</span><br><span class="line"></span><br><span class="line">     ---</span><br><span class="line"></span><br><span class="line">## 3.2 蠕虫复制</span><br><span class="line"></span><br><span class="line">  从已有的数据中获取数据，然后将数据进行新增操作：数据成倍的增加；表创建高级操作：从已有的表创建新表（复制表结构）</span><br><span class="line"></span><br><span class="line">  create table 表名 like 数据库.表名；</span><br><span class="line"></span><br><span class="line">  insert into [字段列表] select 字段列表 from 数据表名；从已有 的表拷贝数据到新表中：测试表的压力及效率</span><br><span class="line"></span><br><span class="line">## 3.3 视图</span><br><span class="line"></span><br><span class="line">### 3.3.1 视图操作</span><br><span class="line"></span><br><span class="line">1. 创建视图：create view 视图名字 as select 语句</span><br><span class="line"></span><br><span class="line">2. 修改视图：Alter view 视图名字 as 新的select语句;</span><br><span class="line"></span><br><span class="line">### 3.3.2 视图意义</span><br><span class="line"></span><br><span class="line">1. 视图可以节省SQL语句: 将一条复杂的查询语句使用视图进行保存: 以后可以直接对视图进行操作</span><br><span class="line">2. 数据安全: 视图操作是主要针对查询的, 如果对视图结构进行处理(删除), 不会影响基表数据(相对安全).</span><br><span class="line">3. 视图往往是在大项目中使用, 而且是多系统使用: 可以对外提供有用的数据, 但是隐藏关键(无用)的数据: 数据安全</span><br><span class="line">4. 视图可以对外提供友好型: 不同的视图提供不同的数据, 对外好像专门设计</span><br><span class="line">5. 视图可以更好(容易)的进行权限控制</span><br><span class="line"></span><br><span class="line">6. with check option更新限制</span><br><span class="line"></span><br><span class="line">     ---</span><br><span class="line"></span><br><span class="line">### 3.3.3 视图算法分为三种</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;mysql</span><br><span class="line">Undefined: 未定义(默认的), 这不是一种实际使用算法, 是一种推卸责任的算法: 告诉系统,视图没有定义算法, 系统自己看着办</span><br><span class="line">Temptable: 临时表算法: 系统应该先执行视图的select语句,后执行外部查询语句</span><br><span class="line">Merge: 合并算法: 系统应该先将视图对应的select语句与外部查询视图的  select语句进行合并,然后执行(效率高: 常态)</span><br></pre></td></tr></table></figure></li><li><p>Create algorithm = 指定算法 view 视图名字 as select语句;（指定算法）</p></li><li><p>对比myisam和innodb: 数据存储方式</p></li></ol><p>​         Innodb: 只有表结构,数据全部存储到ibdata1文件中</p><p>​          Myisam: 表,数据和索引全部单独分开存储</p><p>​        增量备份：是针对mysql服务器日志文件进行备份（指定时间开始备份，备份不会重复）</p><hr><h2 id="4-1-事务"><a href="#4-1-事务" class="headerlink" title="4.1 事务"></a>4.1 事务</h2><ol><li><p>事务安全: 一种保护连续操作同时满足(实现)的一种机制</p></li><li><p>MySQL总共5种日志，其中只有redo日志和undo日志与事务有关</p></li></ol><h3 id="4-1-1事务操作"><a href="#4-1-1事务操作" class="headerlink" title="4.1.1事务操作"></a>4.1.1事务操作</h3><ol start="49"><li><p><img src="D:/Blog/source/images/20201208194929953-1621743842295.png" alt="img"></p></li><li><p><strong>START TRANSACTION;</strong></p><p><strong>SQL语句</strong></p><p><strong>[COMMIT | ROLLBACK];</strong></p></li><li><p>回滚点: 在某个成功的操作完成之后, 后续的操作有可能成功有可能失败, 但是不管成功还是失败,前面操作都已经成功: 可以在当前成功的位置, 设置一个点: 可以供后续失败操作返回到该位置, 而不是返回所有操作, 这个点称之为回滚点.</p></li><li><p>设置回滚点名字</p></li><li><p><img src="D:/Blog/source/images/aHR0cHM6Ly91cGxvYWRmaWxlcy5ub3djb2Rlci5jb20vaW1hZ2VzLzIwMjAwMTAxLzQ5NDIzMjVfMTU3Nzg3MjY0NzA5OV84QUI4MUI5M0VCNzkxRUU2Mjk5NTRDRTNENkY2MDhEQw-1621743849669" alt="img"></p></li><li><p>savepoint 回滚点名字；</p></li><li><p>rollback to 回滚点名字</p></li><li><p>事务ACID属性：A: Atomic原子性，一个事物中的所有操作要么全部完成，要么全部失败。事物执行后，不允许停留在中间某个状态。</p><p>C: Consistency一致性，不管在任何给定的时间，并发事务有多少，事务必须保证运行结果的一致性。事务可以并发执行，但是最终MySQL却串行执行。</p><p>怎么保证一致性？</p><p>阻止事务之间相互读取临时数据</p><p>I: <strong>Isolation隔离性</strong>，每个事务只能看到事务内的相关数据，别的事务的临时数据在当前事务是看不到的。隔离性要求事务不受其他并发事务的影响，在给定时间内，该事务是数据库运行的唯一事务。</p><p>D: <strong>Durability持久性</strong>，事务一旦提交，结果便是永久性的。即便发生宕机，仍然可依靠事务日志完成数据持久化。</p></li></ol><h3 id="4-1-2事务的并发"><a href="#4-1-2事务的并发" class="headerlink" title="4.1.2事务的并发"></a>4.1.2事务的并发</h3><ol><li><p><strong>脏读</strong>：一个事务读取了第二个事务未提交的数据，当第二个事务回滚之后，第一个事务就读取到了无效的数据</p></li><li><p><strong>不可重复读</strong>：一个事物前后两次读取的同一数据不一致。不可重复读会把数据提交，脏读的数据是无效的，而不可重复读因为事务2的提交，数据是有效的。</p><p><strong>幻读</strong>：指一个事务两次查询的结果集记录数不一致</p></li><li><p>锁机制: innodb默认是行锁, 但是如果在事务操作的过程中, 没有使用到索引,那么系统会自动全表检索数据, 自动升级为表锁</p><p>行锁: 只有当前行被锁住, 别的用户不能操作</p><p>表锁: 整张表被锁住, 别的用户都不能操作</p></li><li><p>事务的隔离级别</p></li><li><p><img src="D:/Blog/source/images/20201209100236701-1621743856379.png" alt="img"></p></li><li><p>```mysql<br>SET [PERSIST|GLOBAL|SESSION]</p><pre><code>TRANSACTION ISOLATION LEVEL&#123;    READ UNCOMMITTED | READ COMMITTED    | REPEATABLE READ    | SERIALIZABLE&#125;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   -- PERSIST:所有连接到mysql服务的新的连接都有效，并且mysql服务器重启后也不会丢失修改</span><br><span class="line">   -- GLOCAL: 所有连接到mysql服务的新的连接都有效，但是mysql服务器重启后会丢失这个修改</span><br><span class="line">   -- SESSION：开发最常用，只会影响到当前连接，当前连接断开，这个隔离级别的修改就会丢失</span><br><span class="line"></span><br><span class="line">   -- 开发中也可以用show variables like &#39;%iso%&#39;查看当前session的隔离级别</span><br><span class="line">   -- 因为有一个变量参数名为transaction_isolation</span><br><span class="line"></span><br><span class="line">7. SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; &#x2F;*代表可以读取其他事务未提交的数据*&#x2F;</span><br><span class="line"></span><br><span class="line">8. START TRANSACTION;</span><br><span class="line"></span><br><span class="line">9. SELECT empno, ename, sal FROM t_emp;</span><br><span class="line"></span><br><span class="line">### 4.1.3事务的隔离级别</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;mysql</span><br><span class="line">SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; &#x2F;*代表可以读取其他事务未提交的数据*&#x2F;</span><br><span class="line"></span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">SELECT empno, ename, sal FROM t_emp;</span><br></pre></td></tr></table></figure></li></ol><p><img src="D:/Blog/source/images/20210405135037989-1621743865636.png" alt="img"></p><h2 id="4-2-触发器"><a href="#4-2-触发器" class="headerlink" title="4.2 触发器"></a>4.2 触发器</h2><ol><li><p>trigger:事先为某张表绑定好一段代码，当表中的某些内容发生改变的时候系统会自动出发代码执行</p></li><li><p>触发器: 事件类型, 触发时间, 触发对象</p><p>事件类型: 增删改, 三种类型insert,delete和update</p><p>触发时间: 前后: before和after</p><p>触发对象: 表中的每一条记录(行)</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Delimiter 自定义符号：后续代码中只有碰到自定义符号才算结束</span><br><span class="line"></span><br><span class="line">Create trigger 触发器名字 触发时间 事件类型 on 表名 for each row</span><br><span class="line"></span><br><span class="line">Begin -- 代表左大括号: 开始</span><br><span class="line"></span><br><span class="line">-- 里面就是触发器的内容: 每行内容都必须使用语句结束符: 分号</span><br><span class="line"></span><br><span class="line">End -- 代表右带括号: 结束</span><br><span class="line"></span><br><span class="line">-- 语句结束符</span><br><span class="line"></span><br><span class="line">自定义符号</span><br><span class="line"></span><br><span class="line">-- 将临时修改修正过来</span><br></pre></td></tr></table></figure><ol start="3"><li>查看触发器 show tiggers [like ‘pattern’] </li><li>\g的作用与;  \G的作用是将查到的结果转化为90°</li><li>所有的触发器都会保存一张表中: Information_schema.triggers</li><li>删除触发器：Drop trigger 触发器名字</li></ol><h2 id="4-3-数学函数"><a href="#4-3-数学函数" class="headerlink" title="4.3 数学函数"></a>4.3 数学函数</h2><p><img src="D:/Blog/source/images/20201208104018633-1621743871407.png" alt="img"></p><p><img src="file://C:/Users/%E5%BC%A0/Pictures/Saved%20Pictures/20201208104538953.png?lastModify=1621740732" alt="img"></p><h2 id="4-4-日期函数"><a href="#4-4-日期函数" class="headerlink" title="4.4 日期函数"></a>4.4 日期函数</h2><ol><li><p>CURDATE()函数能获得当前系统日期，格式yyyy-MM-dd<br>CURTIME()函数能获得当前系统时间，格式hh:mm:ss</p></li><li><p>Data_FORMAT:(日期，表达式)：SELECT ename,   DATE_FORMAT(hiredate,”%Y”) AS result FROM t_emp;</p></li><li><p><img src="D:/Blog/source/images/20201208111133290-1621743901526.png" alt="img"></p></li><li><p>```mysql<br>SELECT COUNT(*) FROM t_emp</p><p>WHERE DATE_FORMAT(hiredate,”%Y”)=1981</p><p>AND DATE_FORMAT(hiredate,”%m”)&lt;=6;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5. 日期偏移计算：&#x2F;*100天之后是什么时间*&#x2F;</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;mysql</span><br><span class="line">SELECT DATE_ADD(NOW(), INTERVAL 100 DAY);</span><br><span class="line">&#x2F;*300分钟之前是什么时间*&#x2F;</span><br><span class="line">SELECT DATE_ADD(NOW(), INTERVAL -300 MINUTE);</span><br><span class="line">&#x2F;*6个月零3天之前是什么时间*&#x2F;</span><br><span class="line">SELECT DATE_ADD(DATE_ADD(NOW(),INTERVAL -6 MONTH),INTERVAL -3 DAY)</span><br></pre></td></tr></table></figure></li><li><p>计算日期之间相隔的天数:DATEDIFF(日期1, 日期2)</p></li></ol><h2 id="4-5-字符函数"><a href="#4-5-字符函数" class="headerlink" title="4.5 字符函数"></a>4.5 字符函数</h2><p><img src="D:/Blog/source/images/20201208152508542-1621743909598.png" alt="img"></p><p><img src="../Pictures/Saved%20Pictures/20201208155309727.png" alt="img"></p><h2 id="4-6-自定义创建函数"><a href="#4-6-自定义创建函数" class="headerlink" title="4.6 自定义创建函数"></a>4.6 自定义创建函数</h2><ol><li><p>创建函数；Create function  函数名([形参列表]) returns 数据类型 – 规定要返回的数据类型</p><p>Begin</p><p>– 函数体</p><p>– 返回值: return 类型(指定数据类型);</p><p>End</p></li><li><p>查看函数：查看所有函数: show function status [like ‘pattern’];</p></li><li><p>查看函数的创建语句: show create function 函数名;</p></li><li><p>mysql的作用域：全局变量: 使用set关键字定义, 使用@符号标志</p></li></ol><p>局部变量: 使用declare关键字声明, 没有@符号: 所有的局部变量的声明,必须在函数体开始之前</p><hr><h2 id="4-7-存储过程"><a href="#4-7-存储过程" class="headerlink" title="4.7 存储过程"></a>4.7 存储过程</h2><ol><li><p>存储过程是一种用来处理数据的方式，没有返回值</p></li><li><pre><code class="mysql">Create procedure 过程名字([参数列表])Begin-- 过程体End</code></pre></li><li><p>查看所有过程: show procedure status [like ‘pattern’];</p></li><li><p> 查看过程创建语句: show create procedure 过程名;</p></li><li><p>过程的调用：call</p></li><li><p>过程参数：In: 数据只是从外部传入给内部使用(值传递): 可以是数值也可以是变量</p></li></ol><p>​       Out: 只允许过程内部使用(不用外部数据), 给外部使用的.(引用传递: 外部的数据会被先清空才会进入到内部): 只能是变量;Inout: 外部可以在内部使用,内部修改也可以给外部使用: 典型的引用传递: 只能传变量</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/mysql/">mysql</category>
      
      
    </item>
    
  </channel>
</rss>
